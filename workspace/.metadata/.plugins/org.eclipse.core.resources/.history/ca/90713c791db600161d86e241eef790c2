package com.zenika.microservices.resanet;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

import java.net.URI;
import java.net.URISyntaxException;
import java.util.List;

import org.junit.After;
import org.junit.Before;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpMethod;
import org.springframework.http.RequestEntity;
import org.springframework.web.client.RestTemplate;

import com.zenika.microservices.resanet.controller.VilleController;
import com.zenika.microservices.resanet.domain.Ville;


//TODO 08 Mettre les annotations pour utiliser JUnitSpring4 et setup le contexte
public class VilleTest {

	private static final Logger LOGGER = LoggerFactory.getLogger(VilleTest.class);
	
	private static Long VILLE_ID = (long) 1;
	private static String VILLE_NOM_ADD = "Brest";
	
	//TODO 09 : Créer le RestTemplate
	private RestTemplate restTemplate = new RestTemplate();
	
	@Before
	public void initTest () {
		Ville ville = restTemplate.getForObject("http://localhost:8000/villes/{villeId}", Ville.class, VILLE_ID);;
		if (ville.getNom().equals("PARIS")) {
			ville.setNom("Paris");
		}
		
		Long villeId = restTemplate.getForObject("http://localhost:8000/villes/{villeName}", Long.class, VILLE_NOM_ADD);;
		if (villeId > 0) {
			Ville ville2 = restTemplate.getForObject("http://localhost:8000/villes/{villeId}", Ville.class, villeId);
			LOGGER.info("ville trouvé : "+ville2.getNom());
		}
		
	}
	
	@After
	public void clearTest () {
		Ville ville = new Ville();
		ville.setNom("Paris");
		HttpEntity<Ville> req = new HttpEntity<Ville>(ville);
		
		restTemplate.put("http://localhost:8000/villes/" + VILLE_ID, req);		
		
		restTemplate.getForObject("http://localhost:8000/villes/{villeId}", Ville.class, VILLE_ID);		
	}
	
	//TODO 10 décommenter 
	@Test
	public void testGetList(){
		//List<Ville> villes = restTemplate. ...
		List<Ville> villes = restTemplate.getForObject("http://localhost:8000/villes/", List.class);		
		assertEquals(4, villes.size());
	}
	
	//TODO 11
	@Test
	public void testGetId(){
		Ville ville = restTemplate.getForObject("http://localhost:8000/villes/{villeId}", Ville.class, VILLE_ID);		
		assertEquals("Paris",ville.getNom());
	}

	//TODO 12 : Utiliser le restTemplate pour créer une ville
	@Test
	public void testCreateVille(){
		Ville ville = new Ville();
		ville.setNom("VILLE_NOM_ADD");
		
		restTemplate.postForObject("http://localhost:8000/villes/", ville, Ville.class);		
		assertNotNull(ville.getId()); //Signifie que c'est une ville
	}
	
	
	//TODO 17 : Utiliser le restTemplate pour modifier une ville
	@Test
	public void testUpdateVille() throws URISyntaxException{
		Ville ville = new Ville();
		ville.setNom("PARIS");
		HttpEntity<Ville> req = new HttpEntity<Ville>(ville);
		
		restTemplate.put("http://localhost:8000/villes/" + VILLE_ID, req);		
		
		Ville villeTest = restTemplate.getForObject("http://localhost:8000/villes/{villeId}", Ville.class, VILLE_ID);		
		assertEquals("PARIS",villeTest.getNom());
	}
}
